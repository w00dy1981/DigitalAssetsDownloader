name: Auto Release on Main Merge

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-release')"
    permissions:
      contents: write
      pull-requests: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Wine (for Windows builds on Linux)
        run: |
          sudo apt update
          sudo apt install -y wine64

      - name: Run tests
        run: npm test

      - name: Check if version bump needed
        id: version-check
        run: |
          # Check if this is a version bump commit (only check first line of commit message)
          commit_first_line="${{ github.event.head_commit.message }}"
          commit_first_line="${commit_first_line%%$'\n'*}"  # Get only first line
          if [[ "$commit_first_line" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "skip-bump=true" >> $GITHUB_OUTPUT
          else
            echo "skip-bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        id: bump-type
        if: steps.version-check.outputs.skip-bump == 'false'
        run: |
          # Use first line of commit message for version bump detection
          commit_first_line="${{ github.event.head_commit.message }}"
          commit_first_line="${commit_first_line%%$'\n'*}"  # Get only first line
          
          # Major release indicators
          if [[ "$commit_first_line" =~ (BREAKING|major|Major|MAJOR) ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          # Minor release indicators (features, refactoring, significant changes)
          elif [[ "$commit_first_line" =~ (feat|feature|Feature|refactor|Refactor|Phase|phase) ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          # Patch release (fixes, chores, docs)
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Configure git
        if: steps.version-check.outputs.skip-bump == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        if: steps.version-check.outputs.skip-bump == 'false'
        run: |
          npm version ${{ steps.bump-type.outputs.bump }} --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
          
          # Create commit and tag
          git add package.json package-lock.json
          git commit -m "$NEW_VERSION"
          git tag "v$NEW_VERSION"
          
          # Push changes
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Build and publish release
        if: steps.version-check.outputs.skip-bump == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npx electron-builder --win --publish always